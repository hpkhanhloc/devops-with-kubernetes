Exercise 3.06: DBaaS vs DIY
- DBaaS: it can be Cloud SQL, Bigtable or other services, it can be seen as fully managed databases. Google will handle maintenance tasks, backup, patching and scaling. The benefit is that, developers dont need to mess with these tasks above, just need to 
create database and focus on building app, the rest will be handled by Google Cloud. In contrast, it mean that developers might not have access to the exact version of database, extension or the exact flavor of database that they want.
- Run database on Kubernetes: Developer get full of options in addition benefits from automation of Kubernetes. However, pods are transient, so that the possible that database application restarts or failovers is higher. And some database administrative tasks: backup,
scaling, tuning, etc. are different due to the added abstractions that come with containerization.

Exercise 3.07: Commitment
- It will depend on context of application to select suitable solution for database. In this term of project, for learning purpose, I will select to run database on Kubernetes, I suppose it is faster compare with define conection between Cloud SQL and Kubernetes Engine.

Exercise 5.04: Rancher vs OpenShift
OpenShift:
- Community version is open source but Enterprise version is not
- Installation may take long time for complex environment, and switch to Vanilla Kubernetes is not possible
- There are build in tools that support container images, in addition securite controller for cluster
- Dont follow Cloud Native Computing Foundation (CNCF) practices, but there are its own practices like its non-kubernetes-native cli called oc-client.
- Use operators for everything, provide operational knowledge how apps are deployed, however because relies on operators for everything, it is not flexibility and hard to administrate

Rancher:
- Is open source
- Installation in short time (install and update apps on multi clusters at the same time) and possible to switch to Vanilla Kubernetes
- Follow industry practice and CNCF
- Lauches clusters in minutes and can run Kubernetes anywhere
- There are APIs equivalence for all functions 

Exercise 5.06
1. Used MariaDB outside of this course
2. Have used MongoDB outside of this course
3. Have used PostgresSQL outside of this course and use it for todo-app, pingpong-application
4. Use HELM for install something in this course
5. Have used Github Actions in this course and outside also
6. Have used Gitlab outside of this course
7. Have used Google Cloud Build in this course and outside
8. Have used Jenkins outside of this course
9. Have used Travis CI indirectly outside of this course, not sure how it works
10. Have used Kubernetes in this course and outside for scheduling and orchestration
11. Have used NGINX outside of this course for support proxy
12. Use Traefik proxy in this course for pingpong-application
13. Use Linkerd in part 5 this course
14. Have use Google Persistent Disk in this course
15. Have use Terraform outside of this course for configuration and automation project in Google Cloud
16. Have use Google Container Registry in part 3 this course and outside also.
17. Have use Docker in this course and outside for build images
18. Use Rancher in this course at platform
19. Have use Google Kubernetes Engine in this course and outside
20. Have use Google Cloud in this course and outside
21. Use Prometheus in this course for analysis
22. Use Grafana in this course for analysis
23. Have used Google Stackdriver outside of this course for analysis project
24. Have used Elastic outside this course for logging
25. Use Grafana Loki in this course